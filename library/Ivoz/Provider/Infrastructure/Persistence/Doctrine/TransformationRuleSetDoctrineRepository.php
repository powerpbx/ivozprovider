<?php

namespace Ivoz\Provider\Infrastructure\Persistence\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Ivoz\Provider\Domain\Model\TransformationRuleSet\TransformationRuleSetRepository;
use Ivoz\Provider\Domain\Model\TransformationRuleSet\TransformationRuleSet;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * TransformationRuleSetDoctrineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransformationRuleSetDoctrineRepository extends ServiceEntityRepository implements TransformationRuleSetRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, TransformationRuleSet::class);
    }

    /**
     * @param array $criteria
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     *
     * * @deprecated dead code
     */
    public function countByCriteria(array $criteria)
    {
        $alias = 'TransformationRuleSet';
        $qb = $this->createQueryBuilder($alias);
        $qb->select('count('. $alias .')');

        foreach ($criteria as $field => $value) {
            $normalizedField = $alias . '.' . $field;
            $qb->andWhere(
                $qb->expr()->eq($normalizedField, $value)
            );
        }

        return $qb
            ->getQuery()
            ->getSingleScalarResult();
    }
}
